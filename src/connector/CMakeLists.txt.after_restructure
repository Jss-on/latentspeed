# Connector Framework Library
# Reorganized following Hummingbot pattern: Core + Exchange-specific subdirectories
# USE THIS VERSION AFTER RUNNING: bash tools/execute_restructure.sh

cmake_minimum_required(VERSION 3.20)

# ============================================================================
# Core Connector Sources (exchange-agnostic)
# ============================================================================
set(CONNECTOR_CORE_SOURCES
    connector_base.cpp
    client_order_tracker.cpp
    in_flight_order.cpp
    zmq_order_event_publisher.cpp
)

# ============================================================================
# Hyperliquid Exchange Implementation
# ============================================================================
set(HYPERLIQUID_CONNECTOR_SOURCES
    exchange/hyperliquid/hyperliquid_auth.cpp
    exchange/hyperliquid/hyperliquid_integrated_connector.cpp
    exchange/hyperliquid/hyperliquid_perpetual_connector.cpp
    exchange/hyperliquid/hyperliquid_user_stream_data_source.cpp
    exchange/hyperliquid/hyperliquid_order_book_data_source.cpp
)

# ============================================================================
# Combined Connector Library
# ============================================================================
add_library(connector_framework STATIC
    ${CONNECTOR_CORE_SOURCES}
    ${HYPERLIQUID_CONNECTOR_SOURCES}
)

target_include_directories(connector_framework
    PUBLIC
        ${CMAKE_SOURCE_DIR}/include
)

# ============================================================================
# Dependencies
# ============================================================================
find_package(nlohmann_json CONFIG REQUIRED)
find_package(Boost REQUIRED COMPONENTS system thread)
find_package(OpenSSL REQUIRED)
find_package(spdlog CONFIG REQUIRED)
find_package(cppzmq CONFIG REQUIRED)

target_link_libraries(connector_framework
    PUBLIC
        spdlog::spdlog
        nlohmann_json::nlohmann_json
        Boost::boost
        Boost::system
        Boost::thread
        OpenSSL::SSL
        OpenSSL::Crypto
        cppzmq
)

# ============================================================================
# Compiler Settings
# ============================================================================
target_compile_features(connector_framework PUBLIC cxx_std_20)

if(MSVC)
    target_compile_options(connector_framework PRIVATE /W4)
else()
    target_compile_options(connector_framework PRIVATE -Wall -Wextra -Wpedantic)
endif()

# ============================================================================
# Installation
# ============================================================================
install(TARGETS connector_framework
    LIBRARY DESTINATION lib
    ARCHIVE DESTINATION lib
    RUNTIME DESTINATION bin
)

install(DIRECTORY ${CMAKE_SOURCE_DIR}/include/connector
    DESTINATION include
    FILES_MATCHING PATTERN "*.h"
)
